[tool.pylint.main]

# Minimum Python version to use for version dependent checks.
py-version = 3.12

# Specify a score threshold under which the program will exit with error.
fail-under = 10

# Files or directories to be skipped. They should be base names, not paths.
ignore = [CVS,.venv]

# Add files or directories regex patterns to ignore list
# ignore-paths = ["**\\.venv\\**"]

# Files or directories matching the regular expression patterns are skipped. The
# regex matches against base names, not paths.
ignore-patterns = ["^\\.#"]

# Use multiple processes to speed up Pylint.
# 0 = auto-detect
jobs = 0

# List of plugins (CSV of python module names)
# load-plugins =

# Pickle collected data for later comparisons.
persistent = true

# Discover python modules/packages in file system subtree.
recursive = true

# Add (globbed) paths (absolute or relative to cwd) to the list of the source roots.
source-roots = ["src"]

# Report common misconfiguration
suggestion-mode = true


[tool.pylint.basic]
argument-naming-style = snake_case
# argument-rgx =

attr-naming-style = snake_case
# attr-rgx =

bad-names = [foo, bar, baz, toto, tutu, tata]
# bad-names-rgxs =

class-attribute-naming-style = any
# class-attribute-rgx =

class-const-naming-style = UPPER_CASE

class-naming-style = PascalCase
# class-rgx =

const-naming-style = UPPER_CASE
# const-rgx =

docstring-min-length = -1

function-naming-style = snake_case
# function-rgx =

# Good variable names which should always be accepted, separated by a comma.
good-names = [_,i, j, k]
# good-names-rgxs =

include-naming-hint = true

inlinevar-naming-style = snake_case
# inlinevar-rgx =

method-naming-style = snake_case
# method-rgx =

module-naming-style = any
# module-rgx =

# List of decorators that produce properties
property-classes = [abc.abstractproperty]

# Regular expression matching correct type alias names.
typealias-rgx = ^T@

# Regular expression matching correct type variable names.
typevar-rgx = ^T

variable-naming-style = snake_case
# variable-rgx =

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = [builtins.BaseException, builtins.Exception]

[tool.pylint.format]
# Expected format of line ending (LF or CRLF).
expected-line-ending-format = LF

# Regexp for lines allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )? <?https?://\\S+ >?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit. This is usually      (4 spaces) or \t (1
# tab).
indent-string = "    "

# Maximum number of characters on a single line.
max-line-length = 150

[tool.pylint.imports]
# List of modules that can be imported at any level, not just the top level.
# allow-any-import-level =

# Allow explicit reexports by alias from a package __init__.
allow-reexport-from-package = true

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all = true

# Force import order to recognize a module as part of a third party library.
known-third-party = requests, rich-argparse, docker, GitPython

# Couples of modules and preferred modules, separated by a comma.
# preferred-modules =

[tool.pylint.logging]
# The type of string formatting that logging methods do.
# `old`: use `%`
# `new`: use `{}`
logging-format-style = new

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = [logging]

[tool.pylint.messages control]

# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
# confidence =

# CSV list of messages, reports, categories, or checkers IDs to ignore.
disable = raw-checker-failed, missing-module-docstring, missing-class-docstring, missing-function-docstring, attribute-defined-outside-init, too-few-public-methods, unnecessary-lambda-assignment

[tool.pylint.method_args]
# List of qualified names which require a timeout
# parameter
timeout-methods = [requests.api.delete, requests.api.get, requests.api.head, requests.api.options, requests.api.patch, requests.api.post, requests.api.put, requests.api.request]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = [TODO]

# Regular expression of note tags to take in consideration.
notes-rgx = "^\/\/\s?TODO:.*$"

[tool.pylint.refactoring]
# Maximum number of nested blocks in function/method body
max-nested-blocks = 5

# Complete name of functions that never returns
never-returning-functions = [sys.exit, argparse.parse_error]

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# Variables: 'fatal', 'error', 'warning', 'refactor', 'convention', 'info'
#   - contain the number of messages in each category
# 'statement': total number of statements analyzed
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

# New-style template used to display messages.  See doc for all details.
# msg-template =

# Set the output format.
# Available formats: text, parseable, colorized, json2 (improved json format), json (old json format), msvs (visual studio)
# Alternate reporter class module: e.g. mypackage.mymodule.MyReporterClass.
# output-format = json2

# Display a full report or only the messages
# reports =

# Activate the evaluation score.
score = true

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Imports are removed from the similarity computation
ignore-imports = true

# Signatures are removed from the similarity computation
ignore-signatures = true

# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4

# Spelling dictionary name. Requires both
# the python package and the system dependency
# spelling-dict =

# List of comma separated words that should not be checked.
# spelling-ignore-words =

# A path to a file that contains the private dictionary; one word per line.
# spelling-private-dict-file =

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
# spelling-store-unknown-words =

[tool.pylint.typecheck]
# List of decorators that produce context manager
contextmanager-decorators = [contextlib.contextmanager]

# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins = [no-member, not-async-context-manager, not-context-manager, attribute-defined-outside-init]

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
# ignored-classes = [optparse.Values, thread._local, _thread._local, argparse.Namespace, docker.models.resource.Model]

# Show a hint with possible names when a member name was not found
missing-member-hint = true

[tool.pylint.variables]

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true

# List of names allowed to shadow builtins
allowed-redefined-builtins = [id]

# List of strings which can identify a callback function by name
callbacks = [cb_, _cb]

# A regular expression matching the name of dummy variables (i.e. expected to not
# be used).
dummy-variables-rgx = "_$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)"

# Argument names that match this expression will be ignored.
ignored-argument-names = "_$"

# Tells whether we should check for unused import in __init__ files.
init-import = true

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [six.moves, past.builtins, future.builtins, builtins, io]